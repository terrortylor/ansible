# tasks file for vim and nvim
- name: Ensure ~/workspace-personnal directory exists
  file:
    path: "~/.workspace-personnal"
    state: directory

# TODO: Fix this FFS
# - name: checkout vim-environment
#   git:
#     repo: 'git@github.com:terrortylor/vim-environment.git'
#     dest: "~/workspace-personnal/vim-environment"
#     update: no
#     key_file: "~/.ssh/id_rsa"
#     # accept_hostkey: yes
#   # become: no
#   become_user: terminal.install_user

# I don't like this but issue with using git above with permissions
# However I don't want ansible to manage updating
- name: Checkout my vim environment
  shell: >
    ls ~/workspace-personnal/vim-environment | grep 'README.md'
    && echo 'Already checkedout'
    || git clone --recursive https://github.com/terrortylor/vim-environment.git ~/workspace-personnal/vim-environment
  remote_user: terminal.install_user
  register: git_result
  changed_when: "'Already checkedout' not in git_result.stdout"

- name: Ensure ~/.config directory exists
  file:
    path: "~/.config"
    state: directory

- name: Create symbolic link of neovim config files
  file:
    src: '~/workspace-personnal/vim-environment/nvim/config'
    dest: '~/.config/nvim'
    state: link

- name: Ensure ~/.local/share/nvim/site/pack directory exists
  file:
    path: "~/.local/share/nvim/site/pack"
    state: directory

- name: Create symbolic link of neovim plugins
  file:
    src: '~/workspace-personnal/vim-environment/nvim/plugins'
    dest: '~/.local/share/nvim/site/pack/plugins'
    state: link

- name: Create symbolic link of markdownlint-cli config
  file:
    src: '~/workspace-personnal/vim-environment/nvim/config/efm-langserver-config.yaml'
    dest: '~/.config/efm-langserver/config.yaml'
    state: link
- name: Install ubuntu packages
  import_tasks: ubuntu.yml
  when: ansible_facts['os_family'] == "Debian"

- name: Install osx vim packages
  import_tasks: osx.yml
  when: ansible_facts['os_family'] == "Darwin"

- name: Install npm global vim packages
  npm:
    name: "{{ item }}"
    global: yes
  loop: "{{ vim.npm.packages.global }}"

# Install the desired go packages
- name: Install go vim packages (GO111MODULE)
  remote_user: packages.install_user
  shell: >
    which '{{ item }}' | grep '{{ item }}'
    && echo 'Already installed.' || GO111MODULE=on go get '{{ item }}'
  loop: "{{ vim.go.packages_go111module }}"
  register: gopkg_result
  changed_when: "'Already installed.' not in gopkg_result.stdout"

- name: Install go vim packages
  remote_user: packages.install_user
  shell: >
    which '{{ item }}' | grep '{{ item }}'
    && echo 'Already installed.' || go get '{{ item }}'
  loop: "{{ vim.go.packages }}"
  register: gopkg_result
  changed_when: "'Already installed.' not in gopkg_result.stdout"

- name: Install pip vim packages
  pip:
    name: "{{ item }}"
    executable: pip
  loop: "{{ vim.pip.packages }}"
