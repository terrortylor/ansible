# {{{ Theme
# only this line might not be enough
STATUS_DIVIDER_COLOUR="#F43753"

set -g default-terminal "xterm-256color"
# Needs this line also to overrides the default color
set-option -ga terminal-overrides ",xterm-256color:Tc"

# Set status bar colour, note fg is the test
set-option -g status-style bg=$STATUS_DIVIDER_COLOUR,fg=black
# Sets the selected window colurs
set-window-option -g window-status-current-style fg=$STATUS_DIVIDER_COLOUR,bg=black
# bind z resizep -Z \; if -F '#{window_zoomed_flag}' 'window-status-current-style fg=$STATUS_DIVIDER_COLOUR,bg=yellow' 'window-status-current-style fg=$STATUS_DIVIDER_COLOUR,bg=black'

# set inactive/active window styles
set -g window-style 'fg=default,bg=default'
set -g window-active-style 'fg=default,bg=default'
# set -g window-style 'fg=colour250,bg=black'
# set -g window-active-style 'fg=colour247,bg=colour236'

# pane border
set -g pane-border-bg colour235
set -g pane-border-fg colour238
set -g pane-active-border-bg $STATUS_DIVIDER_COLOUR
set -g pane-active-border-fg colour51

set-option -g status-right "#(date '+%H:%M:%S   %d (%a) %B')"
# }}} Theme
# {{{ Window and Pane Settings
# 0 is too far from ` ;) so set numbers to start from 1
# Windows
set -g base-index 1

# Renumber to avoid gaps in window numbering when closing windows
set-option -g renumber-windows on
# Panes
setw -g pane-base-index 1

# Open new pane/window in current dir
bind c new-window      -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind = split-window -v -c "#{pane_current_path}"

# Automatically set window title
# set-window-option -g automatic-rename on
# set-option -g set-titles on
# }}} Window and Pane Settings
# {{{ Vim mode config
# I like vim binings, so set copy-mode to use vi bindings
set-window-option -g mode-keys vi
# Although this doesn't select with v and yank with y, so...
bind-key -T copy-mode-vi 'v' send -X begin-selection
# Some times it's nice to yank without escaping
bind-key -T copy-mode-vi 'Y' send -X copy-selection
bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel
# Don't forget to emulate block select
bind-key -T copy-mode-vi 'C-v' send -X begin-selection \; send -X rectangle-toggle
# Also I want esc to cancel as well as q
bind-key -T copy-mode-vi 'Escape' send -X cancel
# }}} Vim mode config
# {{{ General Settings
# Small delay in presing the escape key in nvim when using escape
set -s escape-time 0
# }}} General Settings
# {{{ Custom Mappings
# Reload tmux config
bind r source-file ~/.tmux.conf \; display-message "tmux config reloaded"

bind -n F3 set mouse \; display-message "Mouse mode: #{?mouse, ON, OFF}"
# }}} Custom Mappings
# {{{ Navigation
# vim-tmux-navigation default bindings
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\ select-pane -l

# But when I pair it's useful to have mouse functionality
# set -g mouse on
# }}} Navigation
