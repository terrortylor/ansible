# function helper to open a new markdown file based on given name, appends
# date to the file name.
# If a note exists with given name and date then it is opened
#
# TODO support notes with same name but different dates
#
# Arguement handling half inched from: https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash

NOTE_PATH="${HOME}/workspace/notes"
DEBUG=0
LIST=0

# Print the tools usage
usage() {
  cat << EOL
this
is a
mult
EOL
}

# Handle arguments
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
  -n|--notepath)
    NOTE_PATH="$2"
    shift # past argument
    shift # past value
    ;;
  -l|--list)
    LIST=1
    shift;; # past argument
  -h|--help)
    usage
    exit 0;;
  -d|--debug)
    DEBUG=1
    shift;; # past argument
  *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# Print some debug info if required
if [ $DEBUG -eq 1 ]; then
  echo "DEBUG      = true"
  echo "NOTE PATH  = ${NOTE_PATH}"
  echo "NOTES NAME = $1"
  echo "LIST       = $LIST"
fi

# simply lists the notes in the notes dir
note_list() {
  pushd $NOTE_PATH > /dev/null
  # List all files, sort using '-' as delimeter
  # orderng by year then month then day, and
  # reversing so that newest is at the top
  ls | sort -t- \
    -k3,3 \
    -k2,2 \
    -k1,1 \
    -r
  popd > /dev/null
}

note() {
  if [ -z $EDITOR ]; then
    echo "env variable EDITOR not set, exiting"
    exit 1
  fi

  local note_name
  note_name=$(note::get_note_name $1)

  if [ ! -f "${NOTE_PATH}/${note_name}" ]; then
    touch "${NOTE_PATH}/${note_name}"
  fi

  $EDITOR "${NOTE_PATH}/${note_name}"
}

# Takes two areguments, first is the user passed in note
# name from command line, second is weather we want regex
# note name or dated note name when first argument not empty
note::build_note_name() {
  # if no name is supplied then use todays date
  if [ -z $1 ]; then
    # no name supplied so just use date
    echo "$(date +%d-%m-%Y).md"
  else
    # if name supplied then build possible note name
    if [ "${2}" -eq 1 ]; then
      echo "*-${1}.md"
    else
      echo "$(date +%d-%m-%Y)-${1}.md"
  fi
fi
}

note::get_note_name() {
  pushd $NOTE_PATH > /dev/null
  local note
  note=$(note::build_note_name "${1}" "1")

  # check if one file exists with name
  found_note=$(ls 2>/dev/null -Ubad1 -- ${note})
  popd > /dev/null

  if [ ! -z "$found_note" ]; then
    # note exists
    echo "${found_note}"
  else
    # note doesn't exist to build dated name
    note=$(note::build_note_name "${1}" "0")
    echo ${note}
  fi
}

if [ $LIST -eq 1 ]; then
  note_list
  exit 0
fi

if [ -z $1 ]; then
  usage
  exit 1
else
  note $1
fi
